{
package parser
}

Script = commands:Command* EOF                                    { return convertScript(c, commands) }
Command = _ id:ID _ '=' _ val:Value                               { return convertCommand(c, id, val) }

Value = val:(Block / Macro / Boolean / Number / ID) _ Comment? _  { return val, nil }

Block = '{' commands:Command* '}'                                 { return convertBlock(c, commands) }
Macro = "$" ID "$"                                                { return convertMacro(c) }
ID = [a-zA-Z0-9_.:]+                                              { return convertID(c) }
Boolean = "yes" / "no"                                            { return convertBoolean(c) }
Number = '-'? Int ( '.' Digit+ )?                                 { return convertNumber(c) }

/* Util Types */
Comment = '#' [^\n\r]*

Int = '0' / NonZeroDigit Digit*

Digit = [0-9]

NonZeroDigit = [1-9]

_ "whitespace" = [ \t\r\n]*

EOF = !.
